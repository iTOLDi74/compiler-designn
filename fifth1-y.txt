%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int yylex();
int yyerror(char *msg);
int temp_count = 0;  // Temporary variable counter

// Function to generate a new temporary variable
char* new_temp() {
    static char temp_name[10];
    sprintf(temp_name, "t%d", temp_count++);
    return strdup(temp_name);  // Return a copy of the temporary variable name
}
%}

%union {
    int num;
    char var;
    char *temp;
}

%token <num> NUM
%token <var> VAR
%left '+' '-'
%left '*' '/'
%right '^'            // Exponentiation with right-to-left associativity
%right NEGATIVE       // Right-to-left associativity for unary minus

%type <temp> E

%%

S:  E { printf("Result in: %s\n", $1); free($1); }
    ;

E:  E '+' E {
          $$ = new_temp();
          printf("%s = %s + %s\n", $$, $1, $3);
          free($1);
          free($3);
      }
    | E '-' E {
          $$ = new_temp();
          printf("%s = %s - %s\n", $$, $1, $3);
          free($1);
          free($3);
      }
    | E '*' E {
          $$ = new_temp();
          printf("%s = %s * %s\n", $$, $1, $3);
          free($1);
          free($3);
      }
    | E '/' E {
          if (strcmp($3, "0") == 0) {
              yyerror("division by zero");
              exit(1);
          }
          $$ = new_temp();
          printf("%s = %s / %s\n", $$, $1, $3);
          free($1);
          free($3);
      }
    | E '^' E {
          $$ = new_temp();
          printf("%s = %s ^ %s\n", $$, $1, $3);
          free($1);
          free($3);
      }
    | '(' E ')' { $$ = $2; }
    | '-' E %prec NEGATIVE {
          $$ = new_temp();
          printf("%s = -%s\n", $$, $2);
          free($2);
      }
    | NUM {
          $$ = new_temp();
          printf("%s = %d\n", $$, $1);
      }
    | VAR {
          $$ = new_temp();
          printf("%s = %c\n", $$, $1);
      }
    ;

%%

int main() {
    printf("Enter an expression:\n");
    yyparse();
    return 0;
}

int yyerror(char *msg) {
    fprintf(stderr, "Error: %s\n", msg);
    return 0;
}
