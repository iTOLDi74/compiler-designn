#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define MAX_TOKEN_LENGTH 100
#define MAX_INPUT_LENGTH 256

const char *keywords[] = {
    "int", "return", "scanf", "if", "else", "while", "for", "do", "switch", "case", "default", "break", "continue",
    "void", "char", "float", "double", "long", "short", "unsigned", "signed", "static", "struct", "union", "enum",
    "typedef", "const", "sizeof", "volatile", "extern", "register", "auto", "goto", "include", "define", "if", NULL
};

int isKeyword(const char *token)
{
    for (int i = 0; keywords[i] != NULL; i++)
    {
        if (strcmp(token, keywords[i]) == 0)
        {
            return 1;
        }
    }
    return 0;
}

void printOperatorName(char *token, FILE *output)
{
    fprintf(output, "Operator: %s\n", token);
    if (strcmp(token, "+") == 0) fprintf(output, "Addition: %s\n\n", token);
    else if (strcmp(token, "-") == 0) fprintf(output, "Subtraction: %s\n\n", token);
    else if (strcmp(token, "*") == 0) fprintf(output, "Multiplication: %s\n\n", token);
    else if (strcmp(token, "/") == 0) fprintf(output, "Division: %s\n\n", token);
    else if (strcmp(token, "=") == 0) fprintf(output, "Assignment: %s\n\n", token);
    else if (strcmp(token, "<") == 0) fprintf(output, "Less than: %s\n\n", token);
    else if (strcmp(token, ">") == 0) fprintf(output, "Greater than: %s\n\n", token);
    else if (strcmp(token, "==") == 0) fprintf(output, "Equality: %s\n\n", token);
    else if (strcmp(token, "!=") == 0) fprintf(output, "Inequality: %s\n\n", token);
    else if (strcmp(token, "<=") == 0) fprintf(output, "Less than or equal: %s\n\n", token);
    else if (strcmp(token, ">=") == 0) fprintf(output, "Greater than or equal: %s\n\n", token);
    else if (strcmp(token, "&&") == 0) fprintf(output, "Logical AND: %s\n\n", token);
    else if (strcmp(token, "||") == 0) fprintf(output, "Logical OR: %s\n\n", token);
    else if (strcmp(token, "!") == 0) fprintf(output, "Logical NOT: %s\n\n", token);
    else if (strcmp(token, "^") == 0) fprintf(output, "Bitwise XOR: %s\n\n", token);
    else if (strcmp(token, "%") == 0) fprintf(output, "Modulus: %s\n\n", token);
    else if (strcmp(token, "(") == 0) fprintf(output, "Left parenthesis: %s\n\n", token);
    else if (strcmp(token, ")") == 0) fprintf(output, "Right parenthesis: %s\n\n", token);
    else if (strcmp(token, "{") == 0) fprintf(output, "Left curly brace: %s\n\n", token);
    else if (strcmp(token, "}") == 0) fprintf(output, "Right curly brace: %s\n\n", token);
    else if (strcmp(token, "[") == 0) fprintf(output, "Left square bracket: %s\n\n", token);
    else if (strcmp(token, "]") == 0) fprintf(output, "Right square bracket: %s\n\n", token);
    else if (strcmp(token, ",") == 0) fprintf(output, "Comma: %s\n\n", token);
    else if (strcmp(token, ";") == 0) fprintf(output, "Semicolon: %s\n\n", token);
    else fprintf(output, "Unknown operator: %s\n\n", token);
}

void identifyTokens(char *input, FILE *output)
{
    char token[MAX_TOKEN_LENGTH];
    int i = 0, j = 0;

    while (input[i] != '\0')
    {
        if (isspace(input[i]))
        {
            i++;
            continue;
        }

        if (isalpha(input[i]) || input[i] == '_')
        {
            while (isalpha(input[i]) || isdigit(input[i]) || input[i] == '_')
            {
                token[j++] = input[i++];
            }
            token[j] = '\0';

            if (isKeyword(token))
            {
                fprintf(output, "Keyword: %s\n\n", token);
            }
            else
            {
                fprintf(output, "Identifier: %s\n\n", token);
            }
            j = 0;
        }

        else if (isdigit(input[i]))
        {
            while (isdigit(input[i]))
            {
                token[j++] = input[i++];
            }
            token[j] = '\0';
            fprintf(output, "Number: %s\n\n", token);
            j = 0;
        }

        else if (strchr("+-*/=<>!&|^%", input[i]))
        {
            token[j++] = input[i++];
            if ((token[0] == '=' || token[0] == '!' || token[0] == '<' || token[0] == '>') && input[i] == '=')
            {
                token[j++] = input[i++];
            }
            else if ((token[0] == '&' || token[0] == '|') && input[i] == token[0])
            {
                token[j++] = input[i++];
            }
            token[j] = '\0';
            printOperatorName(token, output);
            j = 0;
        }

        else if (strchr("(){}[];,", input[i]))
        {
            token[j++] = input[i++];
            token[j] = '\0';
            printOperatorName(token, output);
            j = 0;
        }

        else
        {
            i++;
        }
    }
}

int main()
{
    FILE *inputFile, *tokens;

    inputFile = fopen("input.txt", "r");
    if (inputFile == NULL)
    {
        printf("Error: Could not open input file.\n");
        return 1;
    }

    tokens = fopen("tokens.txt", "w");
    if (tokens == NULL)
    {
        printf("Error: Could not open output file.\n");
        fclose(inputFile);
        return 1;
    }

    char line[256];
    while (fgets(line, sizeof(line), inputFile))
    {
        identifyTokens(line, tokens);
    }
    // Close both files
    fclose(inputFile);
    fclose(tokens);

    printf("Data successfully written to tokens.txt\n");
    return 0;
}
